Vulnerability: in js code, to create a new element and set its text with innerHTML and not innerText depended on the input from the user !
Exploit: can sending a /join message, it takes whatever is after that to be the name of the channel, i.e the innerHTML attribute of it. Thus, we can put a name, and also add script tag to execute our code. The script is to send a message (POST Method to '/post' function) with the message being 'Good Morning!' and the author is the user who sent it, that we we know who logged in or refreshed his page. To make it display immidiately in the general-spam channel, I call RefreshMessages function, with changing current channel just before the call, and returning it back to original value after the call. That way, whoever views general spam channel will see the message, but there is no difference in the screen for the user who is sending it, making it unnoticeable for him.

One thing that bothered me is that the whole script is viewed in the current channel if one if watching the channel I've added (magic channel). That's not very good, to say the least. I've tried to hide the injection by putting tags but it didn't do the job. I don't give up easily so I've used a mutationObserver to watch when current-channel element text is the magic channel (with all the other script and my code) and change it immidiately, so that he see's only the name of the channel I intended (again, '#magic channel').

My attack works because I add a new channel to the backend DATABASE, and since /list_channels is being called all the time, it runs the script I injected (xss) in every user.
