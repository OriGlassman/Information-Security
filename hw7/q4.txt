This time the pid was given as argument, so the get_payload (q4.py) includes the pid.
The interesting part in the question is the .c file: first I attached to the process, then I call ptrace_syscall, the first time it stops just before execution of a system call. Now, I check the value of eax (orig_eax), by viewing values of system(), I saw that 0x03 is sys_read, so I checked if the register is equal 3, change edx (which plays the part of the length, saw that on the same page on the internet) to zero - which means every read wont really read anything - good for us. Changing the registers is by ptrace_setregs, and getregs is with a special struct, user_regs_struct. after setting the modified registers, called ptrace_syscall again, this time it is suppose to stop after executing the system call, and then it continues in infinite loop.